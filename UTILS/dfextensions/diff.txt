--- AliasDataFrame.py

+++ AliasDataFrame.py

@@ def export_tree(self, filename_or_file, treename="tree", dropAliasColumns=True,compression=uproot.LZMA(level=9),chunk_bytes=None):
-    def export_tree(self, filename_or_file, treename="tree", dropAliasColumns=True,compression=uproot.LZMA(level=9),chunk_bytes=None):
+    def export_tree(self, filename_or_file, treename="tree", dropAliasColumns=True,compression=uproot.LZMA(level=9),chunk_bytes=None, basket_size=1024*1024):
         is_path = isinstance(filename_or_file, str)

         if is_path:
             with uproot.recreate(filename_or_file,compression=compression) as f:
-                self._write_to_uproot(f, treename, dropAliasColumns, chunk_bytes=chunk_bytes)
+                self._write_to_uproot(f, treename, dropAliasColumns, chunk_bytes=chunk_bytes, basket_size=basket_size)
             self._write_metadata_to_root(filename_or_file, treename)
         else:
-            self._write_to_uproot(filename_or_file, treename, dropAliasColumns)
+            self._write_to_uproot(filename_or_file, treename, dropAliasColumns, basket_size=basket_size)

         for subframe_name, entry in self._subframes.items():
-            entry["frame"]._write_metadata_to_root(filename_or_file, f"{treename}__subframe__{subframe_name}")
+            entry["frame"]._write_metadata_to_root(filename_or_file, f"{treename}__subframe__{subframe_name}")

@@ def _write_to_uproot(self, uproot_file, treename, dropAliasColumns,chunk_bytes=None):
-    def _write_to_uproot(self, uproot_file, treename, dropAliasColumns,chunk_bytes=None):
+    def _write_to_uproot(self, uproot_file, treename, dropAliasColumns,chunk_bytes=None, basket_size=1024*1024):
         export_cols = [col for col in self.df.columns if not dropAliasColumns or col not in self.aliases]
         dtype_casts = {col: np.float32 for col in export_cols if self.df[col].dtype == np.float16}
         export_df = self.df[export_cols].astype(dtype_casts)

-        uproot_file[treename] = export_df
+        uproot_file.mktree(
+            treename,
+            {col: export_df[col].dtype for col in export_df.columns},
+            basket_size=basket_size
+        )
+        uproot_file[treename].extend(export_df)

         for subframe_name, entry in self._subframes.items():
-            entry["frame"].export_tree(uproot_file, f"{treename}__subframe__{subframe_name}", dropAliasColumns)
+            entry["frame"].export_tree(uproot_file, f"{treename}__subframe__{subframe_name}", dropAliasColumns, basket_size=basket_size)

